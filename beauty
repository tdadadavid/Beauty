#!/bin/bash

# Function to install dependencies based on the chosen package manager
install_dependencies() {
  case "$1" in
    "npm")
      npm install
      ;;
    "pnpm")
      pnpm install
      ;;
    "yarn")
      yarn install
      ;;
    "bun")
      bun install
      ;;
    *)
      echo "Invalid package manager choice. Exiting."
      exit 1
      ;;
  esac
}

# Function to create the specified directory structure
create_structure() {
  folder_name="$1"

  # Create the specified directory structure
  mkdir -p "$folder_name/services"
  touch "$folder_name/services/index.ts"

  mkdir -p "$folder_name/router/schema"
  touch "$folder_name/router/schema/index.ts"

  mkdir -p "$folder_name/model"
  touch "$folder_name/model/index.ts"

  touch "$folder_name/$folder_name.module.ts"
  touch "$folder_name/index.ts"
}

# Prompt for the app name
read -p "Enter the name of the app: " app_name

# Prompt for the app description
read -p "Enter the description of the app: " app_description

# Prompt for the directory choice
read -p "Do you want to create the app in the current directory? (y/n): " create_in_current_directory

# Determine the root directory
if [ "$create_in_current_directory" = "y" ]; then
  root_directory="$PWD/$app_name"
else
  read -p "Enter the path for the new directory (or press Enter for the current directory): " new_directory
  root_directory="${new_directory:-$app_name}"
fi

# Create the root directory
mkdir -p "$root_directory"

# Navigate to the root directory
cd "$root_directory"

# Create the src directory structure
mkdir -p src/auth src/app src/users src/core/{config,utils,mail,filesystem,middleware,types,errors,logging}
mkdir -p infra test .github

# Create the app main entry point
touch main.ts 

# Create the tsconfig.json file
echo '{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "es2017",
    "sourceMap": true,
    "outDir": "./dist",
    "rootDir": "src",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "noImplicitAny": true,
    "strictBindCallApply": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true
  }
}' > tsconfig.json

# Create other Node.js configuration files if needed (e.g., package.json, .gitignore)
touch package.json
touch .gitignore

# Add basic content to package.json
echo '{
  "name": "'"$app_name"'",
  "version": "1.0.0",
  "description": "'"$app_description"'",
  "main": "main.js",
  "scripts": {
    "build:prod": "tsc -p tsconfig.json",
    "build:dev": "tsc -p tsconfig.json",
    "clean": "rimraf ./dist tsconfig.tsbuildinfo",
    "start:prod": "npm run clean && npm run build:prod && node dist/main.js",
    "start:dev": "npm run clean && npm run build:dev && NODE_ENV=development && nodemon main"
  },
  "keywords": ["king", "beauty"],
  "author": "github.com/tdadadavid",
  "license": "MIT",
  "dependencies": {
   "@types/multer": "^1.4.8",
    "axios": "^1.4.0",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.2",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "eventemitter2": "^6.4.9",
    "express": "^4.18.2",
    "express-mongo-sanitize": "^2.2.0",
    "express-rate-limit": "^6.9.0",
    "form-data": "^4.0.0",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.2",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.1",
    "moment": "^2.29.4",
    "mongoose": "^7.4.2",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.4",
    "pm2": "^5.3.0",
    "prettier": "^3.0.2",
    "pretty-quick": "^3.1.3",
    "rimraf": "^5.0.5",
    "typescript": "^5.1.6",
    "winston": "^3.10.0"
 },
   "devDependencies": {
   "@types/bcryptjs": "^2.4.4",
    "@types/compression": "^1.7.2",
    "@types/cors": "^2.8.13",
    "@types/express": "^4.17.17",
    "@types/helmet": "^4.0.0",
    "@types/jsonwebtoken": "^9.0.2",
    "@types/morgan": "^1.9.4",
    "@types/nodemailer": "^6.4.9",
    "babel-jest": "^29.6.2",
    "husky": "^8.0.0",
    "jest": "^29.6.2",
    "nodemon": "^3.0.1",
    "ts-jest": "^29.1.1",
    "ts-node-dev": "^2.0.0"
  }
}' > package.json

# Add basic content to .gitignore
echo 'node_modules
*.log
# Add other files/directories to ignore as needed
' > .gitignore

# Create Dockerfile and nginx.conf inside the infra folder
echo 'FROM nginx:latest

COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY ./ /usr/share/nginx/html

EXPOSE 80

' > infra/Dockerfile

echo 'server {
    listen 80;
    server_name localhost;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
' > infra/nginx.conf

# Create additional files in the root directory
touch docker-compose.yml Dockerfile .prettierrc .dockerignore .env .env.example

# Install dependencies using the chosen package manager
read -p "Choose a package manager (npm/pnpm/yarn/bun): " package_manager
install_dependencies "$package_manager"

echo "Beauty crafted perfectly in '$root_directory' directory."
